[00:00] Vamos fazer uma revisão do que vimos no capítulo. A primeira coisa que estudamos foi sobre a questão de visibilidade de métodos. Por padrão, quando você declara um método em TypeScript, ele é public. É como se eu tivesse escrito public na frente, mas ele adota que é public.

[00:19] Então, o que faremos? Se eu passo o nome por cima do método, ele me dá detalhes do método. Mas percebi métodos da minha classe que eu não quero tornar acessíveis para alguém do lado de fora.

[00:32] Então é por isso que tornamos os métodos private. Porque, se olharmos no negociação-controller, o único método que queremos expor para quem for utilizar essa classe, é o método adiciona. O restante são métodos utilitários e que não faz sentido serem expostos para quem está utilizando o modelo.

[00:52] Outra coisa que estudamos foi o processo de validação de negociação, porque não podemos aceitar que o usuário impute uma negociação que seja fora de um dia útil, que não seja em um dia útil.

[01:02] Então criamos, primeiro, um método de dia útil que checa se é dia útil ou não a data da negociação que criamos. Nossa primeira abordagem foi que para trabalharmos com os dias da semana, sábado, domingo, segunda, terça, o método de date, que é getDay, que ele retorna qual é o dia da semana, retorna como número; zero é domingo. Então vai até 6, que é sábado.

[01:29] E ficar lendo zero e 6 no código não é algo interessante. Nossa primeira tentativa foi isolar aqui, que eu até não apaguei, que eu vou apagar agora, foi isolar o sábado e o domingo em propriedades read ons do método da minha classe Controller, e utilizar para tornar o nosso código mais legível.

[01:51] Salvei. Mas aprendemos que isso não é legal, porque se eu precisar utilizar essas mesmas constantes em outros lugares da minha aplicação, eu vou ficar repetindo código. Então, o interessante é que o TypeScript, diferente da linguagem JavaScript, ele traz o conceito de enuns.

[02:07] Uma enum é uma namespace que você define. No caso, o namespace que eu defini é DiasDaSemana, em que você pode definir valores de constante. Valores que nunca vão mudar durante a sua aplicação, mas que eu posso, a qualquer momento, realizar DiasDaSemana.DOMINGO, e eu posso até jogar em uma variável esse valor.

[02:29] Inclusive, se eu passo o mouse em cima dessa variável, eu vou ver que esse é item é de uma enum, que o valor dela é domingo. Então isso é legal, porque você, trabalhando com o enum, você dando o ponto, você sabe todos os valores constantes que dizem respeito a esse namespace.

[02:48] Tanto isso é verdade que se eu volto para o negociação-controller, percebemos que o nosso método é dia útil, ele está pegando getDay, e está testando contra o valor da minha enum.

[03:01] O importante é entender que o getDay retorna number, e o meu domingo é um valor numérico. Outra coisa que eu falei é para a tomar cuidado quando declaramos constantes, porque o que o TypeScript faz, por padrão, é que se eu defino uma constante e não digo qual é o valor dessa constante da enum, ele vai adotar como padrão o valor zero, 1, 2, 3, 4, na ordem.

[03:29] Aprendemos que isso não é uma boa prática. Boa prática é eu estipular qual é o valor que eu quero para essa constante. Porque se eu mudar ela de posição, o valor não vai mudar porque não é o TypeScript que está atribuindo esses valores na ordem que eles aparecem aqui na definição da minha enum.

[03:47] Ficou claro? Então está aí. Vimos os cuidados, e vamos partir para o próximo capítulo para vermos mais coisas.